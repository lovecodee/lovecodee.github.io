<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码随想录之数组站</title>
      <link href="/2023/03/06/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AB%99/"/>
      <url>/2023/03/06/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="一-基础知识"><a href="#一-基础知识" class="headerlink" title="(一)基础知识"></a>(一)基础知识</h3><p> <strong>I.   数组：是一种用来存储<code>同一类型值</code>的集合。（通过下标可以访问数组中  的每一个值）</strong></p><p><img src="https://img-blog.csdnimg.cn/20210402083943914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4NDIzNA==,size_16,color_FFFFFF,t_70" alt="新手小白学JAVA 数组 数组工具类 二维数组_程序媛 泡泡的博客-CSDN博客_java 数组截取"></p><p>​    <strong>说明：</strong>       </p><blockquote><p><em><strong>①  数组空间在进行分配时地址是连续的。</strong></em></p><p><em><strong>②  定义数组时如果没有初始化，数组会有默认初始化值</strong></em></p><p><em><strong>③  在数组中不存在删除元素，准确的说法是   “</strong></em> <em><strong>覆盖</strong></em>”“</p></blockquote><p><strong>II. 创建方式</strong></p><blockquote><p> <em><strong>方式一：数据类型 []arr={xx,xx,xx,xx}（等价于 new 数据类型[]{xx,xx,xx,xx}）</strong></em></p></blockquote><blockquote><p> <em><strong>方式二：数据类型 []arr=new int[n];</strong></em></p></blockquote><h3 id="（二）训练试题"><a href="#（二）训练试题" class="headerlink" title="（二）训练试题"></a>（二）训练试题</h3><h4 id="·-二分查找"><a href="#·-二分查找" class="headerlink" title="· 二分查找"></a>· 二分查找</h4><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><blockquote><p>​      <strong>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</strong></p></blockquote><h5 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h5><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.90345f3f68132b68e845a4a77fbb978e?rik=Fcds9QhXSwyeig&riu=http://www.soolco.com/group1/M00/0B/FA/rBAADF9gJWqAXBDGAABxg4IZVbs9.image&ehk=Fqz91o8wyQSeb5mni7MfqO6Cd3Ky9mSMoeeJeth0nxc=&risl=&pid=ImgRaw&r=0" alt="二分查找及其变种算法-博客"></p><blockquote><p> <strong>题干条件： 数组已经是排序数组</strong></p><p> <strong>解题思路：</strong></p><p>  <strong><code>暴力循环法</code>：通过一个循环，从左到右进行遍历进行查找</strong>             </p><p> ​      <em><strong><code>时间复杂度: O（n）</code></strong></em></p><p>  <strong><code>二分法</code>:   通过中间值与target的大小比较，缩小搜索的区间范围，从而降低时间复杂度</strong>  </p><p> ​    *** <code>时间复杂度:  O（logn）</code>***</p></blockquote><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*本题目主要使用的是左闭右闭区间[left,right]*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123; </span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="comment">//右移运算符来进行求解中间下标</span></span><br><span class="line">            middle=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="·-移除元素"><a href="#·-移除元素" class="headerlink" title="· 移除元素"></a>· 移除元素</h4><h5 id="试题描述"><a href="#试题描述" class="headerlink" title="试题描述"></a>试题描述</h5><blockquote><p>​    <strong>给定一个数组nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</strong></p><p><strong>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。</strong></p><p><strong>注意</strong>：***<code>元素的顺序可以改变,不需要考虑数组中超出新长度后面的元素。</code>***</p></blockquote><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif" alt="27.移除元素-双指针法" style="zoom:150%;" /><blockquote><p><strong>解题方法</strong></p><p><strong><code>暴力循环法</code>： 通过双层循环来进行操作</strong>        </p><p> <em><strong><code>时间复杂度: O(n^2)</code></strong></em></p><p><strong><code>快慢指针法</code>：<code>fastIndex</code>指针用来进行外层遍历，<code>slowIndex</code>指针用来<code>记录待替换的位置</code></strong>                </p><p> <em><strong><code>时间复杂度: O(n)</code></strong></em></p></blockquote><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">       <span class="type">int</span> slowIndex=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> fastIndex=<span class="number">0</span>;fastIndex&lt;nums.length;fastIndex++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[fastIndex]!=val)&#123;</span><br><span class="line">               nums[slowIndex++]=nums[fastIndex];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h4><h5 id="试题描述-1"><a href="#试题描述-1" class="headerlink" title="试题描述"></a>试题描述</h5><blockquote><p>  <strong>给你一个按 <code>非递减顺序 </code>排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</strong></p></blockquote><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><blockquote><p> <code>**双指针法**</code></p><p> <strong>思路：</strong></p><p>   <strong>①  创建一个和原数组等大小的数组</strong></p><p>   <strong>②  对原数组遍历并将其对应位置更新为元素的平方</strong></p><pre><code>**③ 在通过一次遍历，通过双指针从数组的两端到中间进行比较并从右到左填充新数组(升序排列)**</code></pre><p> ​      <em><strong><code>时间复杂度: O(n)</code></strong></em></p></blockquote><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line"><span class="type">int</span>[]arr=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"><span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]*=nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=nums.length-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[left]&gt;=nums[right])&#123;</span><br><span class="line">arr[j]=nums[left++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    arr[j]=nums[right--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h4><h5 id="试题描述-2"><a href="#试题描述-2" class="headerlink" title="试题描述"></a>试题描述</h5><blockquote><p>​      <strong>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</strong></p></blockquote><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><blockquote><p>​     <strong><code>双指针法</code>： 通过双指针来定位区间，不断移动区间，比较并更新满足条件的最短区间长度</strong></p></blockquote><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//本题主要使用的是双指针法</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//Integer.MAX_VALUE用来表示整数所能表示的最大值</span></span><br><span class="line">        <span class="type">int</span> result=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> right=<span class="number">0</span>;right&lt;nums.length;right++)&#123;</span><br><span class="line">            sum+=nums[right];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="comment">//滑动窗口的关键（通过result不断更新从而得到区间数）</span></span><br><span class="line">                result=Math.min(result,right-left+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//滑动窗口左边届移动</span></span><br><span class="line">                sum-=nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span>:result; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="螺旋矩阵II"><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h4><h5 id="试题描述-3"><a href="#试题描述-3" class="headerlink" title="试题描述"></a>试题描述</h5><blockquote><p>   <strong>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</strong></p></blockquote><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="img" style="zoom: 67%;" /><blockquote><p>   <strong><code>关键点</code>：边界的确定及填充的圈数</strong></p></blockquote><h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line"><span class="type">int</span> loop=<span class="number">0</span>; <span class="comment">//表示圈数</span></span><br><span class="line"><span class="type">int</span>[][]arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"><span class="type">int</span> start=<span class="number">0</span>; <span class="comment">//表示圈开始位置（start,start）</span></span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>; <span class="comment">//填充的数字</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(loop++&lt;n/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//上边界: 左到右</span></span><br><span class="line"><span class="keyword">for</span>(j=start;j&lt;n-loop;j++)&#123;</span><br><span class="line"><span class="comment">//填充的起始位置是arr[start][start]</span></span><br><span class="line">arr[start][j]=count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右边界: 上到下</span></span><br><span class="line"><span class="keyword">for</span>(i=start;i&lt;n-loop;i++)&#123;</span><br><span class="line">arr[i][j]=count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下边界: 右到左</span></span><br><span class="line"><span class="keyword">for</span>(;j&gt;=loop;j--)&#123;</span><br><span class="line">arr[i][j]=count++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//左边界: 上到下</span></span><br><span class="line"><span class="keyword">for</span>(;i&gt;=loop;i--)&#123;</span><br><span class="line">arr[i][j]=count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关键，决定下次环形填充的起始位置</span></span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果满足条件，表示还有中间单元还没被填充</span></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">arr[start][start]=count;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                                                                                                                                                                        </p>]]></content>
      
      
      <categories>
          
          <category> -Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -数组 -双指针 -滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始篇</title>
      <link href="/2023/03/05/This-is-my-first-blog/"/>
      <url>/2023/03/05/This-is-my-first-blog/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>​      <strong>经过几天的探索和尝试，终于将个人博客搭建起来，感觉很棒，推荐一些在安装过程中找到的比较好的教程，希望可以帮到各位小伙伴</strong></p></blockquote><h3 id="（一）Hexo搭建个人博客教程及优质博文推荐"><a href="#（一）Hexo搭建个人博客教程及优质博文推荐" class="headerlink" title="（一）Hexo搭建个人博客教程及优质博文推荐"></a><strong>（一）<code>Hexo</code>搭建个人博客教程及优质博文推荐</strong></h3><p><img src="https://img.zcool.cn/community/0184e45c1f6ab5a80121df90c0ac5b.png@1280w_1l_2o_100sh.png" alt="龙猫|影视|短片|爱学习的果子毛 - 原创作品 - 站酷 (ZCOOL)"></p><p><a href="https://blog.csdn.net/Colincoin/article/details/102594799"><strong>① Hexo的安装与配置</strong></a>              |          <a href="https://blog.csdn.net/weixin_44835732/article/details/104906631"><strong>② Git安装与配置</strong></a>                   |             <a href="https://blog.csdn.net/zgd826237710/article/details/99671027"><strong>③热门主题选择</strong></a>            |       <a href="https://blog.csdn.net/mjh1667002013/article/details/129290903"><strong>④ 主题下载与美化</strong></a></p><p>  <strong>检查是否安装成功（可通过以下命令查看版本号）</strong>：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">-v</span>    </span><br><span class="line">npm <span class="literal">-v</span>   </span><br><span class="line">git <span class="literal">-v</span></span><br></pre></td></tr></table></figure><p>   <strong>提醒(常见错误及原因如下)</strong></p><p>​            如果在输入命令时，显示 ‘<code>&quot;xxx&quot; 不是内部或外部命令，也不是可运行的程序或批处理文件</code> </p><blockquote><p>出错原因: 在安装的过程中没有将安装路径添加或正确添加到环境变量中，加入即可解决</p></blockquote><h3 id="（二）网站介绍"><a href="#（二）网站介绍" class="headerlink" title="（二）网站介绍"></a><strong>（二）网站介绍</strong></h3><blockquote><p>​           创建本博客网站的目的主要是为了记录在学习或在以后的过程中的一些核心内容和经验总结。在以往学习的过程中主要是通过    <code>语雀</code>  和   <code>51CTO</code>  进行记录 ，以后的学习记录和经验会上传到该博客网站上，希望可以和小伙伴们共享。 </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
